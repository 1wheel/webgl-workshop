[
  {
    "name": "gl.activeTexture",
    "kind": "function",
    "description": "Select active texture unit.",
    "usage": "void gl.activeTexture(GLenum texture); ",
    "parameters": {
      "texture": "Specifies which texture unit to make active. The number\n                    of texture units is implementation dependent, but must be at least\n                    8. texture must be one of \n                    gl.TEXTUREi,\n                    where\n                    i ranges from 0 to (gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1). \n                    The initial value is gl.TEXTURE0."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glActiveTexture.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexParameter.xml",
        "name": "gl.texParameter"
      }
    ]
  },
  {
    "name": "gl.attachShader",
    "kind": "function",
    "description": "Attach a shader object to a program object.",
    "usage": "void gl.attachShader(WebGLProgram program,  WebGLShader shader); ",
    "parameters": {
      "program": "Specifies the program object to which a shader\n\t\t    object will be attached.",
      "shader": "Specifies the shader object that is to be attached."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glAttachShader.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCompileShader.xml",
        "name": "gl.compileShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDetachShader.xml",
        "name": "gl.detachShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glLinkProgram.xml",
        "name": "gl.linkProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glShaderSource.xml",
        "name": "gl.shaderSource"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glShaderBinary.xml",
        "name": "gl.shaderBinary"
      }
    ]
  },
  {
    "name": "gl.bindAttribLocation",
    "kind": "function",
    "description": "Associate a generic vertex attribute index with a named attribute variable.",
    "usage": "void gl.bindAttribLocation(WebGLProgram program,  Number index,  const GLchar *name); ",
    "parameters": {
      "program": "Specifies the handle of the program object in\n\t\t    which the association is to be made.",
      "index": "Specifies the index of the generic vertex\n\t\t    attribute to be bound.",
      "name": "Specifies a null terminated string containing\n\t\t    the name of the vertex shader attribute variable to\n\t\t    which index is to be\n\t\t    bound."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindAttribLocation.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDisableVertexAttribArray.xml",
        "name": "gl.disableVertexAttribArray"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnableVertexAttribArray.xml",
        "name": "gl.enableVertexAttribArray"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUseProgram.xml",
        "name": "gl.useProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glVertexAttrib.xml",
        "name": "gl.vertexAttrib"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glVertexAttribPointer.xml",
        "name": "gl.vertexAttribPointer"
      }
    ]
  },
  {
    "name": "gl.bindBuffer",
    "kind": "function",
    "description": "Bind a named buffer object.",
    "usage": "void gl.bindBuffer(GLenum target,  Number buffer); ",
    "parameters": {
      "target": "Specifies the target to which the buffer object is bound.\n                    The symbolic constant must be\n                    gl.ARRAY_BUFFER or\n                    gl.ELEMENT_ARRAY_BUFFER.",
      "buffer": "Specifies the name of a buffer object."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindBuffer.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteBuffers.xml",
        "name": "gl.deleteBuffers"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenBuffers.xml",
        "name": "gl.genBuffers"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml",
        "name": "gl.getParameter"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsBuffer.xml",
        "name": "gl.isBuffer"
      }
    ]
  },
  {
    "name": "gl.bindFramebuffer",
    "kind": "function",
    "description": "Bind a named framebuffer object.",
    "usage": "void gl.bindFramebuffer(GLenum target,  Number framebuffer); ",
    "parameters": {
      "target": "Specifies the target to which the framebuffer object is bound.\n                    The symbolic constant must be\n                    gl.FRAMEBUFFER.",
      "framebuffer": "Specifies the name of a framebuffer object."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindFramebuffer.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteFramebuffers.xml",
        "name": "gl.deleteFramebuffers"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glFramebufferRenderbuffer.xml",
        "name": "gl.framebufferRenderbuffer"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glFramebufferTexture2D.xml",
        "name": "gl.framebufferTexture2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenFramebuffers.xml",
        "name": "gl.genFramebuffers"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml",
        "name": "gl.getParameter"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetFramebufferAttachmentParameteriv.xml",
        "name": "gl.getFramebufferAttachmentParameteriv"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsFramebuffer.xml",
        "name": "gl.isFramebuffer"
      }
    ]
  },
  {
    "name": "gl.bindRenderbuffer",
    "kind": "function",
    "description": "Bind a named renderbuffer object.",
    "usage": "void gl.bindRenderbuffer(GLenum target,  Number renderbuffer); ",
    "parameters": {
      "target": "Specifies the target to which the renderbuffer object is bound.\n                    The symbolic constant must be\n                    gl.RENDERBUFFER.",
      "renderbuffer": "Specifies the name of a renderbuffer object."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindRenderbuffer.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteRenderbuffers.xml",
        "name": "gl.deleteRenderbuffers"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glFramebufferRenderbuffer.xml",
        "name": "gl.framebufferRenderbuffer"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenRenderbuffers.xml",
        "name": "gl.genRenderbuffers"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml",
        "name": "gl.getParameter"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetRenderbufferParameteriv.xml",
        "name": "gl.getRenderbufferParameteriv"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsRenderbuffer.xml",
        "name": "gl.isRenderbuffer"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glRenderbufferStorage.xml",
        "name": "gl.renderbufferStorage"
      }
    ]
  },
  {
    "name": "gl.bindTexture",
    "kind": "function",
    "description": "Bind a named texture to a texturing target.",
    "usage": "void gl.bindTexture(GLenum target,  WebGLTexture texture); ",
    "parameters": {
      "target": "Specifies the target of the active texture unit to which the texture is bound.\n                    Must be either\n                    gl.TEXTURE_2D or\n                    gl.TEXTURE_CUBE_MAP.",
      "texture": "Specifies the name of a texture."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindTexture.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteTextures.xml",
        "name": "gl.deleteTextures"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenTextures.xml",
        "name": "gl.genTextures"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml",
        "name": "gl.getParameter"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetTexParameter.xml",
        "name": "gl.getTexParameter"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsTexture.xml",
        "name": "gl.isTexture"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexImage2D.xml",
        "name": "gl.texImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexParameter.xml",
        "name": "gl.texParameter"
      }
    ]
  },
  {
    "name": "gl.blendColor",
    "kind": "function",
    "description": "Set the blend color.",
    "usage": "void gl.blendColor(Number red,  Number green,  Number blue,  Number alpha); ",
    "parameters": {
      "red, green, blue, alpha": "specify the components of gl.BLEND_COLOR"
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendColor.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendEquation.xml",
        "name": "gl.blendEquation"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendFunc.xml",
        "name": "gl.blendFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetString.xml",
        "name": "gl.getString"
      }
    ]
  },
  {
    "name": "gl.blendEquation",
    "kind": "function",
    "description": "Specify the equation used for both the RGB blend equation and the Alpha blend equation.",
    "usage": "void gl.blendEquation(GLenum mode); ",
    "parameters": {
      "mode": "specifies how source and destination colors are combined.\n                    It must be gl.FUNC_ADD, gl.FUNC_SUBTRACT, or\n                    gl.FUNC_REVERSE_SUBTRACT."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendEquation.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetString.xml",
        "name": "gl.getString"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendColor.xml",
        "name": "gl.blendColor"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendEquationSeparate.xml",
        "name": "gl.blendEquationSeparate"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendFunc.xml",
        "name": "gl.blendFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendFuncSeparate.xml",
        "name": "gl.blendFuncSeparate"
      }
    ]
  },
  {
    "name": "gl.blendEquationSeparate",
    "kind": "function",
    "description": "Set the RGB blend equation and the alpha blend equation separately.",
    "usage": "void gl.blendEquationSeparate(GLenum modeRGB,  GLenum modeAlpha); ",
    "parameters": {
      "modeRGB": "specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined.\n                    It must be gl.FUNC_ADD, gl.FUNC_SUBTRACT, or\n                    gl.FUNC_REVERSE_SUBTRACT.",
      "modeAlpha": "specifies the alpha blend equation, how the alpha component of the source and destination colors are combined.\n                    It must be gl.FUNC_ADD, gl.FUNC_SUBTRACT, or\n                    gl.FUNC_REVERSE_SUBTRACT."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendEquationSeparate.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetString.xml",
        "name": "gl.getString"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendColor.xml",
        "name": "gl.blendColor"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendEquation.xml",
        "name": "gl.blendEquation"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendFunc.xml",
        "name": "gl.blendFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendFuncSeparate.xml",
        "name": "gl.blendFuncSeparate"
      }
    ]
  },
  {
    "name": "gl.blendFunc",
    "kind": "function",
    "description": "Specify pixel arithmetic.",
    "usage": "void gl.blendFunc(GLenum sfactor,  GLenum dfactor); ",
    "parameters": {
      "sfactor": "Specifies how the red, green, blue,\n                    and alpha source blending factors are computed.\n                    The following symbolic constants are accepted:\n                    gl.ZERO,\n                    gl.ONE,\n                    gl.SRC_COLOR,\n                    gl.ONE_MINUS_SRC_COLOR,\n                    gl.DST_COLOR,\n                    gl.ONE_MINUS_DST_COLOR,\n                    gl.SRC_ALPHA,\n                    gl.ONE_MINUS_SRC_ALPHA,\n                    gl.DST_ALPHA,\n                    gl.ONE_MINUS_DST_ALPHA,\n                    gl.CONSTANT_COLOR,\n                    gl.ONE_MINUS_CONSTANT_COLOR,\n                    gl.CONSTANT_ALPHA,\n                    gl.ONE_MINUS_CONSTANT_ALPHA, and\n                    gl.SRC_ALPHA_SATURATE.\n                    The initial value is gl.ONE.",
      "dfactor": "Specifies how the red, green, blue,\n                    and alpha destination blending factors are computed.\n                    The following symbolic constants are accepted:\n                    gl.ZERO,\n                    gl.ONE,\n                    gl.SRC_COLOR,\n                    gl.ONE_MINUS_SRC_COLOR,\n                    gl.DST_COLOR,\n                    gl.ONE_MINUS_DST_COLOR,\n                    gl.SRC_ALPHA,\n                    gl.ONE_MINUS_SRC_ALPHA,\n                    gl.DST_ALPHA,\n                    gl.ONE_MINUS_DST_ALPHA.\n                    gl.CONSTANT_COLOR,\n                    gl.ONE_MINUS_CONSTANT_COLOR,\n                    gl.CONSTANT_ALPHA, and\n                    gl.ONE_MINUS_CONSTANT_ALPHA.\n                    The initial value is gl.ZERO."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendFunc.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendColor.xml",
        "name": "gl.blendColor"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendEquation.xml",
        "name": "gl.blendEquation"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendEquationSeparate.xml",
        "name": "gl.blendEquationSeparate"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendFuncSeparate.xml",
        "name": "gl.blendFuncSeparate"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glClear.xml",
        "name": "gl.clear"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnable.xml",
        "name": "gl.enable"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilFunc.xml",
        "name": "gl.stencilFunc"
      }
    ]
  },
  {
    "name": "gl.blendFuncSeparate",
    "kind": "function",
    "description": "Specify pixel arithmetic for RGB and alpha components separately.",
    "usage": "void gl.blendFuncSeparate(GLenum srcRGB,  GLenum dstRGB,  GLenum srcAlpha,  GLenum dstAlpha); ",
    "parameters": {
      "srcRGB": "Specifies how the red, green, and blue blending factors are computed.\n                    The following symbolic constants are accepted:\n                    gl.ZERO,\n                    gl.ONE,\n                    gl.SRC_COLOR,\n                    gl.ONE_MINUS_SRC_COLOR,\n                    gl.DST_COLOR,\n                    gl.ONE_MINUS_DST_COLOR,\n                    gl.SRC_ALPHA,\n                    gl.ONE_MINUS_SRC_ALPHA,\n                    gl.DST_ALPHA,\n                    gl.ONE_MINUS_DST_ALPHA,\n                    gl.CONSTANT_COLOR,\n                    gl.ONE_MINUS_CONSTANT_COLOR,\n                    gl.CONSTANT_ALPHA,\n                    gl.ONE_MINUS_CONSTANT_ALPHA, and\n                    gl.SRC_ALPHA_SATURATE.\n                    The initial value is gl.ONE.",
      "dstRGB": "Specifies how the red, green, and blue destination blending factors are\n                    computed. The following symbolic constants are accepted:\n                    gl.ZERO,\n                    gl.ONE,\n                    gl.SRC_COLOR,\n                    gl.ONE_MINUS_SRC_COLOR,\n                    gl.DST_COLOR,\n                    gl.ONE_MINUS_DST_COLOR,\n                    gl.SRC_ALPHA,\n                    gl.ONE_MINUS_SRC_ALPHA,\n                    gl.DST_ALPHA,\n                    gl.ONE_MINUS_DST_ALPHA.\n                    gl.CONSTANT_COLOR,\n                    gl.ONE_MINUS_CONSTANT_COLOR,\n                    gl.CONSTANT_ALPHA, and\n                    gl.ONE_MINUS_CONSTANT_ALPHA.\n                    The initial value is gl.ZERO.",
      "srcAlpha": "Specified how the alpha source blending factor is computed.  The same\n                    symbolic constants are accepted as for srcRGB.\n                    The initial value is gl.ONE.",
      "dstAlpha": "Specified how the alpha destination blending factor is computed.  The same\n                    symbolic constants are accepted as for dstRGB.\n                    The initial value is gl.ZERO."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendFuncSeparate.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendColor.xml",
        "name": "gl.blendColor"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendEquation.xml",
        "name": "gl.blendEquation"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendEquationSeparate.xml",
        "name": "gl.blendEquationSeparate"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendFunc.xml",
        "name": "gl.blendFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glClear.xml",
        "name": "gl.clear"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnable.xml",
        "name": "gl.enable"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilFunc.xml",
        "name": "gl.stencilFunc"
      }
    ]
  },
  {
    "name": "gl.bufferData",
    "kind": "function",
    "description": "Create and initialize a buffer object's data store.",
    "usage": "void gl.bufferData(GLenum target,  Numberptr size,  const GLvoid * data,  GLenum usage); ",
    "parameters": {
      "target": "Specifies the target buffer object.\n                    The symbolic constant must be gl.ARRAY_BUFFER or \n                    gl.ELEMENT_ARRAY_BUFFER.",
      "size": "Specifies the size in bytes of the buffer object's new data store.",
      "data": "Specifies a pointer to data that will be copied into the data store for initialization,\n                    or NULL if no data is to be copied.",
      "usage": "Specifies the expected usage pattern of the data store. The symbolic constant must be\n                    gl.STREAM_DRAW, gl.STATIC_DRAW, or \n                    gl.DYNAMIC_DRAW."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBufferData.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindBuffer.xml",
        "name": "gl.bindBuffer"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBufferSubData.xml",
        "name": "gl.bufferSubData"
      }
    ]
  },
  {
    "name": "gl.bufferSubData",
    "kind": "function",
    "description": "Update a subset of a buffer object's data store.",
    "usage": "void gl.bufferSubData(GLenum target,  Numberptr offset,  Numberptr size,  const GLvoid * data); ",
    "parameters": {
      "target": "Specifies the target buffer object.\n                    The symbolic constant must be gl.ARRAY_BUFFER or \n                    gl.ELEMENT_ARRAY_BUFFER.",
      "offset": "Specifies the offset into the buffer object's data store where data replacement will begin,\n                    measured in bytes.",
      "size": "Specifies the size in bytes of the data store region being replaced.",
      "data": "Specifies a pointer to the new data that will be copied into the data store."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBufferSubData.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindBuffer.xml",
        "name": "gl.bindBuffer"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBufferData.xml",
        "name": "gl.bufferData"
      }
    ]
  },
  {
    "name": "gl.checkFramebufferStatus",
    "kind": "function",
    "description": "Return the framebuffer completeness status of a framebuffer object.",
    "usage": "GLenum gl.checkFramebufferStatus(GLenum target); ",
    "parameters": {
      "target": "Specifies the target framebuffer object.\n                    The symbolic constant must be gl.FRAMEBUFFER."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCheckFramebufferStatus.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindRenderbuffer.xml",
        "name": "gl.bindRenderbuffer"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCopyTexImage2D.xml",
        "name": "gl.copyTexImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCopyTexSubImage2D.xml",
        "name": "gl.copyTexSubImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDrawArrays.xml",
        "name": "gl.drawArrays"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDrawElements.xml",
        "name": "gl.drawElements"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glReadPixels.xml",
        "name": "gl.readPixels"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glRenderbufferStorage.xml",
        "name": "gl.renderbufferStorage"
      }
    ]
  },
  {
    "name": "gl.clear",
    "kind": "function",
    "description": "Clear buffers to preset values.",
    "usage": "void gl.clear(GLbitfield mask); ",
    "parameters": {
      "mask": "Bitwise OR of masks that indicate the buffers to be cleared.\n                    The three masks are\n                    gl.COLOR_BUFFER_BIT,\n                    gl.DEPTH_BUFFER_BIT, and\n                    gl.STENCIL_BUFFER_BIT."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glClear.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glClearColor.xml",
        "name": "gl.clearColor"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glClearDepthf.xml",
        "name": "gl.clearDepthf"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glClearStencil.xml",
        "name": "gl.clearStencil"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glColorMask.xml",
        "name": "gl.colorMask"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDepthMask.xml",
        "name": "gl.depthMask"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glScissor.xml",
        "name": "gl.scissor"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilMask.xml",
        "name": "gl.stencilMask"
      }
    ]
  },
  {
    "name": "gl.clearColor",
    "kind": "function",
    "description": "Specify clear values for the color buffers.",
    "usage": "void gl.clearColor(Number red,  Number green,  Number blue,  Number alpha); ",
    "parameters": {
      "red, green, blue, alpha": "Specify the red, green, blue, and alpha values used when the\n                    color buffers are cleared.\n                    The initial values are all 0."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glClearColor.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glClear.xml",
        "name": "gl.clear"
      }
    ]
  },
  {
    "name": "gl.clearDepth",
    "kind": "function",
    "description": "Specify the clear value for the depth buffer.",
    "usage": "void gl.clearDepth(Number depth); ",
    "parameters": {
      "depth": "Specifies the depth value used when the depth buffer is cleared. The\n                    initial value is 1."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glClearDepthf.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glClear.xml",
        "name": "gl.clear"
      }
    ]
  },
  {
    "name": "gl.clearStencil",
    "kind": "function",
    "description": "Specify the clear value for the stencil buffer.",
    "usage": "void gl.clearStencil(Number s); ",
    "parameters": {
      "s": "Specifies the index used when the stencil buffer is cleared.\n                    The initial value is 0."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glClearStencil.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glClear.xml",
        "name": "gl.clear"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilFunc.xml",
        "name": "gl.stencilFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilFuncSeparate.xml",
        "name": "gl.stencilFuncSeparate"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilMask.xml",
        "name": "gl.stencilMask"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilMaskSeparate.xml",
        "name": "gl.stencilMaskSeparate"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilOp.xml",
        "name": "gl.stencilOp"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilOpSeparate.xml",
        "name": "gl.stencilOpSeparate"
      }
    ]
  },
  {
    "name": "gl.colorMask",
    "kind": "function",
    "description": "Enable and disable writing of frame buffer color components.",
    "usage": "void gl.colorMask(Boolean red,  Boolean green,  Boolean blue,  Boolean alpha); ",
    "parameters": {
      "red, green, blue, alpha": "Specify whether red, green, blue, and alpha can or cannot be written\n                    into the frame buffer.\n                    The initial values are all true,\n                    indicating that the color components can be written."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glColorMask.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glClear.xml",
        "name": "gl.clear"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDepthMask.xml",
        "name": "gl.depthMask"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilMask.xml",
        "name": "gl.stencilMask"
      }
    ]
  },
  {
    "name": "gl.compileShader",
    "kind": "function",
    "description": "Compile a shader object.",
    "usage": "void gl.compileShader(WebGLShader shader); ",
    "parameters": {
      "shader": "Specifies the shader object to be\n\t\t    compiled."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCompileShader.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCreateShader.xml",
        "name": "gl.createShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glLinkProgram.xml",
        "name": "gl.linkProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glReleaseShaderCompiler.xml",
        "name": "gl.releaseShaderCompiler"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glShaderSource.xml",
        "name": "gl.shaderSource"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetShaderPrecisionFormat.xml",
        "name": "gl.getShaderPrecisionFormat"
      }
    ]
  },
  {
    "name": "gl.compressedTexImage2D",
    "kind": "function",
    "description": "Specify a two-dimensional texture image in a compressed format.",
    "usage": "void gl.compressedTexImage2D(GLenum target,  Number level,  GLenum internalformat,  Number width,  Number height,  Number border,  Number imageSize,  const GLvoid * data); ",
    "parameters": {
      "target": "Specifies the target texture of the active texture unit.\n                    Must be gl.TEXTURE_2D,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_Z, or\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z.",
      "level": "Specifies the level-of-detail number.\n                    Level 0 is the base image level.\n                    Level n is the nth mipmap reduction image.",
      "internalformat": "Specifies the format of the compressed image data stored at address data.",
      "width": "Specifies the width of the texture image.\n                    All\n                    implementations support 2D texture images that are at least 64 texels\n                    wide and cube-mapped texture images that are at least 16 texels wide.",
      "height": "Specifies the height of the texture image.\n                    All\n                    implementations support 2D texture images that are at least 64 texels\n                    high and cube-mapped texture images that are at least 16 texels high.",
      "border": "Specifies the width of the border.\n                    Must be 0.",
      "imageSize": "Specifies the number of unsigned bytes of image data starting at the\n                    address specified by data.",
      "data": "Specifies a pointer to the compressed image data in memory."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCompressedTexImage2D.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glActiveTexture.xml",
        "name": "gl.activeTexture"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCompressedTexSubImage2D.xml",
        "name": "gl.compressedTexSubImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCopyTexImage2D.xml",
        "name": "gl.copyTexImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCopyTexSubImage2D.xml",
        "name": "gl.copyTexSubImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexImage2D.xml",
        "name": "gl.texImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexSubImage2D.xml",
        "name": "gl.texSubImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexParameter.xml",
        "name": "gl.texParameter"
      }
    ]
  },
  {
    "name": "gl.compressedTexSubImage2D",
    "kind": "function",
    "description": "Specify a two-dimensional texture subimage in a compressed format.",
    "usage": "void gl.compressedTexSubImage2D(GLenum target,  Number level,  Number xoffset,  Number yoffset,  Number width,  Number height,  GLenum format,  Number imageSize,  const GLvoid * data); ",
    "parameters": {
      "target": "Specifies the target texture of the active texture unit.\n                    Must be gl.TEXTURE_2D,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_Z, or\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z.",
      "level": "Specifies the level-of-detail number.\n                    Level 0 is the base image level.\n                    Level n is the nth mipmap reduction image.",
      "xoffset": "Specifies a texel offset in the x direction within the texture array.",
      "yoffset": "Specifies a texel offset in the y direction within the texture array.",
      "width": "Specifies the width of the texture subimage.",
      "height": "Specifies the height of the texture subimage.",
      "format": "Specifies the format of the compressed image data stored at address data.",
      "imageSize": "Specifies the number of unsigned bytes of image data starting at the\n                    address specified by data.",
      "data": "Specifies a pointer to the compressed image data in memory."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCompressedTexSubImage2D.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glActiveTexture.xml",
        "name": "gl.activeTexture"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCompressedTexImage2D.xml",
        "name": "gl.compressedTexImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCopyTexImage2D.xml",
        "name": "gl.copyTexImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCopyTexSubImage2D.xml",
        "name": "gl.copyTexSubImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexImage2D.xml",
        "name": "gl.texImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexSubImage2D.xml",
        "name": "gl.texSubImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexParameter.xml",
        "name": "gl.texParameter"
      }
    ]
  },
  {
    "name": "gl.copyTexImage2D",
    "kind": "function",
    "description": "Copy pixels into a 2D texture image.",
    "usage": "void gl.copyTexImage2D(GLenum target,  Number level,  GLenum internalformat,  Number x,  Number y,  Number width,  Number height,  Number border); ",
    "parameters": {
      "target": "Specifies the target texture of the active texture unit.\n                    Must be gl.TEXTURE_2D,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_Z, or\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z.",
      "level": "Specifies the level-of-detail number.\n                    Level 0 is the base image level.\n                    Level n is the nth mipmap reduction image.",
      "internalformat": "Specifies the internal format of the texture.\n                    Must be one of the following symbolic constants:\n                    gl.ALPHA,\n                    gl.LUMINANCE,\n                    gl.LUMINANCE_ALPHA,\n                    gl.RGB, or\n                    gl.RGBA.",
      "x, y": "Specify the window coordinates of the lower left corner\n                    of the rectangular region of pixels to be copied.",
      "width": "Specifies the width of the texture image.\n                    All implementations support 2D texture images that are at least 64 texels\n                    wide and cube-mapped texture images that are at least 16 texels wide.",
      "height": "Specifies the height of the texture image.\n                    All implementations support 2D texture images that are at least 64 texels\n                    high and cube-mapped texture images that are at least 16 texels high.",
      "border": "Specifies the width of the border.\n                    Must be 0."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCopyTexImage2D.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glActiveTexture.xml",
        "name": "gl.activeTexture"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCheckFramebufferStatus.xml",
        "name": "gl.checkFramebufferStatus"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCompressedTexImage2D.xml",
        "name": "gl.compressedTexImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCompressedTexSubImage2D.xml",
        "name": "gl.compressedTexSubImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCopyTexSubImage2D.xml",
        "name": "gl.copyTexSubImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexImage2D.xml",
        "name": "gl.texImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexParameter.xml",
        "name": "gl.texParameter"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexSubImage2D.xml",
        "name": "gl.texSubImage2D"
      }
    ]
  },
  {
    "name": "gl.copyTexSubImage2D",
    "kind": "function",
    "description": "Copy a two-dimensional texture subimage.",
    "usage": "void gl.copyTexSubImage2D(GLenum target,  Number level,  Number xoffset,  Number yoffset,  Number x,  Number y,  Number width,  Number height); ",
    "parameters": {
      "target": "Specifies the target texture of the active texture unit.\n                    Must be gl.TEXTURE_2D,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_Z, or\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z.",
      "level": "Specifies the level-of-detail number.\n                    Level 0 is the base image level.\n                    Level n is the nth mipmap reduction image.",
      "xoffset": "Specifies a texel offset in the x direction within the texture array.",
      "yoffset": "Specifies a texel offset in the y direction within the texture array.",
      "x, y": "Specify the window coordinates of the lower left corner\n                    of the rectangular region of pixels to be copied.",
      "width": "Specifies the width of the texture subimage.",
      "height": "Specifies the height of the texture subimage."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCopyTexSubImage2D.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glActiveTexture.xml",
        "name": "gl.activeTexture"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCheckFramebufferStatus.xml",
        "name": "gl.checkFramebufferStatus"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCopyTexImage2D.xml",
        "name": "gl.copyTexImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexImage2D.xml",
        "name": "gl.texImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexParameter.xml",
        "name": "gl.texParameter"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexSubImage2D.xml",
        "name": "gl.texSubImage2D"
      }
    ]
  },
  {
    "name": "gl.createProgram",
    "kind": "function",
    "description": "Creates a new WebGLProgram instance.",
    "usage": "WebGLProgram gl.createProgram();",
    "parameters": {},
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCreateProgram.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glAttachShader.xml",
        "name": "gl.attachShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindAttribLocation.xml",
        "name": "gl.bindAttribLocation"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCreateShader.xml",
        "name": "gl.createShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteProgram.xml",
        "name": "gl.deleteProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDetachShader.xml",
        "name": "gl.detachShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glLinkProgram.xml",
        "name": "gl.linkProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml",
        "name": "gl.uniform"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUseProgram.xml",
        "name": "gl.useProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glValidateProgram.xml",
        "name": "gl.validateProgram"
      }
    ]
  },
  {
    "name": "gl.createShader",
    "kind": "function",
    "description": "Creates a new WebGLShader instance.",
    "usage": "WebGLShader gl.createShader();",
    "parameters": {},
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCreateShader.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glAttachShader.xml",
        "name": "gl.attachShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCompileShader.xml",
        "name": "gl.compileShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteShader.xml",
        "name": "gl.deleteShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDetachShader.xml",
        "name": "gl.detachShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glShaderSource.xml",
        "name": "gl.shaderSource"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glShaderBinary.xml",
        "name": "gl.shaderBinary"
      }
    ]
  },
  {
    "name": "gl.cullFace",
    "kind": "function",
    "description": "Specify whether front- or back-facing polygons can be culled.",
    "usage": "void gl.cullFace(GLenum mode); ",
    "parameters": {
      "mode": "Specifies whether front- or back-facing polygons are candidates for culling.\n                    Symbolic constants\n                    gl.FRONT, gl.BACK, and gl.FRONT_AND_BACK are accepted.\n                    The initial value is gl.BACK."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCullFace.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnable.xml",
        "name": "gl.enable"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glFrontFace.xml",
        "name": "gl.frontFace"
      }
    ]
  },
  {
    "name": "gl.deleteBuffer",
    "kind": "function",
    "description": "Deletes a WebGLBuffer instance.",
    "usage": "WebGLBuffer gl.deleteBuffer(WebGLBuffer buffer);",
    "parameters": {
      "buffer": "The WebGLBuffer to delete."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteBuffers.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindBuffer.xml",
        "name": "gl.bindBuffer"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenBuffers.xml",
        "name": "gl.genBuffers"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsBuffer.xml",
        "name": "gl.isBuffer"
      }
    ]
  },
  {
    "name": "gl.deleteFramebuffer",
    "kind": "function",
    "description": "Deletes a WebGLFramebuffer instance.",
    "usage": "WebGLFramebuffer gl.deleteFramebuffer(WebGLFramebuffer framebuffer);",
    "parameters": {
      "framebuffer": "The WebGLFramebuffer to delete."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteFramebuffers.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindFramebuffer.xml",
        "name": "gl.bindFramebuffer"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenFramebuffers.xml",
        "name": "gl.genFramebuffers"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsFramebuffer.xml",
        "name": "gl.isFramebuffer"
      }
    ]
  },
  {
    "name": "gl.deleteProgram",
    "kind": "function",
    "description": "Deletes a WebGLProgram instance.",
    "usage": "WebGLProgram gl.deleteProgram(WebGLProgram program);",
    "parameters": {
      "program": "The WebGLProgram to delete."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteProgram.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCreateShader.xml",
        "name": "gl.createShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDetachShader.xml",
        "name": "gl.detachShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUseProgram.xml",
        "name": "gl.useProgram"
      }
    ]
  },
  {
    "name": "gl.deleteRenderbuffer",
    "kind": "function",
    "description": "Deletes a WebGLRenderbuffer instance.",
    "usage": "WebGLRenderbuffer gl.deleteRenderbuffer(WebGLRenderbuffer renderbuffer);",
    "parameters": {
      "renderbuffer": "The WebGLRenderbuffer to delete."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteRenderbuffers.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindRenderbuffer.xml",
        "name": "gl.bindRenderbuffer"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenRenderbuffers.xml",
        "name": "gl.genRenderbuffers"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsRenderbuffer.xml",
        "name": "gl.isRenderbuffer"
      }
    ]
  },
  {
    "name": "gl.deleteShader",
    "kind": "function",
    "description": "Deletes a WebGLShader instance.",
    "usage": "WebGLShader gl.deleteShader(WebGLShader shader);",
    "parameters": {
      "shader": "The WebGLShader to delete."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteShader.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCreateProgram.xml",
        "name": "gl.createProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCreateShader.xml",
        "name": "gl.createShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDetachShader.xml",
        "name": "gl.detachShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUseProgram.xml",
        "name": "gl.useProgram"
      }
    ]
  },
  {
    "name": "gl.deleteTexture",
    "kind": "function",
    "description": "Deletes a WebGLTexture instance.",
    "usage": "WebGLTexture gl.deleteTexture(WebGLTexture texture);",
    "parameters": {
      "texture": "The WebGLTexture to delete."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteTextures.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindTexture.xml",
        "name": "gl.bindTexture"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenTextures.xml",
        "name": "gl.genTextures"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsTexture.xml",
        "name": "gl.isTexture"
      }
    ]
  },
  {
    "name": "gl.depthFunc",
    "kind": "function",
    "description": "Specify the value used for depth buffer comparisons.",
    "usage": "void gl.depthFunc(GLenum func); ",
    "parameters": {
      "func": "Specifies the depth comparison function.\n                    Symbolic constants\n                    gl.NEVER,\n                    gl.LESS,\n                    gl.EQUAL,\n                    gl.LEQUAL,\n                    gl.GREATER,\n                    gl.NOTEQUAL,\n                    gl.GEQUAL, and\n                    gl.ALWAYS are accepted.\n                    The initial value is gl.LESS."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDepthFunc.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDepthRangef.xml",
        "name": "gl.depthRangef"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnable.xml",
        "name": "gl.enable"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glPolygonOffset.xml",
        "name": "gl.polygonOffset"
      }
    ]
  },
  {
    "name": "gl.depthMask",
    "kind": "function",
    "description": "Enable or disable writing into the depth buffer.",
    "usage": "void gl.depthMask(Boolean flag); ",
    "parameters": {
      "flag": "Specifies whether the depth buffer is enabled for writing.\n                    If flag is false,\n                    depth buffer writing is disabled.\n                    Otherwise, it is enabled.\n                    Initially, depth buffer writing is enabled."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDepthMask.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glColorMask.xml",
        "name": "gl.colorMask"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDepthFunc.xml",
        "name": "gl.depthFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDepthRangef.xml",
        "name": "gl.depthRangef"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilMask.xml",
        "name": "gl.stencilMask"
      }
    ]
  },
  {
    "name": "gl.depthRange",
    "kind": "function",
    "description": "Specify mapping of depth values from normalized device coordinates to window coordinates.",
    "usage": "void gl.depthRange(Number nearVal,  Number farVal); ",
    "parameters": {
      "nearVal": "Specifies the mapping of the near clipping plane to window coordinates.\n                    The initial value is 0.",
      "farVal": "Specifies the mapping of the far clipping plane to window coordinates.\n                    The initial value is 1."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDepthRangef.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDepthFunc.xml",
        "name": "gl.depthFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glPolygonOffset.xml",
        "name": "gl.polygonOffset"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glViewport.xml",
        "name": "gl.viewport"
      }
    ]
  },
  {
    "name": "gl.detachShader",
    "kind": "function",
    "description": "Detach a shader object from a program object.",
    "usage": "void gl.detachShader(WebGLProgram program,  WebGLShader shader); ",
    "parameters": {
      "program": "Specifies the program object from which to\n\t\t    detach the shader object.",
      "shader": "Specifies the shader object to be\n\t\t    detached."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDetachShader.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glAttachShader.xml",
        "name": "gl.attachShader"
      }
    ]
  },
  {
    "name": "gl.disable",
    "kind": "function",
    "description": "Enable or disable server-side GL capabilities.",
    "usage": "void gl.enable(GLenum cap); ",
    "parameters": {
      "cap": "Specifies a symbolic constant indicating a GL capability."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnable.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glActiveTexture.xml",
        "name": "gl.activeTexture"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendFunc.xml",
        "name": "gl.blendFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCullFace.xml",
        "name": "gl.cullFace"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDepthFunc.xml",
        "name": "gl.depthFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDepthRangef.xml",
        "name": "gl.depthRangef"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml",
        "name": "gl.getParameter"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsEnabled.xml",
        "name": "gl.isEnabled"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glLineWidth.xml",
        "name": "gl.lineWidth"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glPolygonOffset.xml",
        "name": "gl.polygonOffset"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glScissor.xml",
        "name": "gl.scissor"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilFunc.xml",
        "name": "gl.stencilFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilOp.xml",
        "name": "gl.stencilOp"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexImage2D.xml",
        "name": "gl.texImage2D"
      }
    ]
  },
  {
    "name": "gl.disableVertexAttribArray",
    "kind": "function",
    "description": "Enable or disable a generic vertex attribute array.",
    "usage": "void gl.enableVertexAttribArray(Number index); void gl.disableVertexAttribArray(Number index); ",
    "parameters": {
      "index": "Specifies the index of the generic vertex\n\t\t    attribute to be enabled or disabled."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnableVertexAttribArray.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindAttribLocation.xml",
        "name": "gl.bindAttribLocation"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDrawArrays.xml",
        "name": "gl.drawArrays"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDrawElements.xml",
        "name": "gl.drawElements"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glVertexAttrib.xml",
        "name": "gl.vertexAttrib"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glVertexAttribPointer.xml",
        "name": "gl.vertexAttribPointer"
      }
    ]
  },
  {
    "name": "gl.drawArrays",
    "kind": "function",
    "description": "Render primitives from array data.",
    "usage": "void gl.drawArrays(GLenum mode,  Number first,  Number count); ",
    "parameters": {
      "mode": "Specifies what kind of primitives to render.\n                    Symbolic constants\n                    gl.POINTS,\n                    gl.LINE_STRIP,\n                    gl.LINE_LOOP,\n                    gl.LINES,\n                    gl.TRIANGLE_STRIP,\n                    gl.TRIANGLE_FAN, and\n                    gl.TRIANGLES are accepted.",
      "first": "Specifies the starting index in the enabled arrays.",
      "count": "Specifies the number of indices to be rendered."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDrawArrays.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCheckFramebufferStatus.xml",
        "name": "gl.checkFramebufferStatus"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDisableVertexAttribArray.xml",
        "name": "gl.disableVertexAttribArray"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDrawElements.xml",
        "name": "gl.drawElements"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnableVertexAttribArray.xml",
        "name": "gl.enableVertexAttribArray"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUseProgram.xml",
        "name": "gl.useProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glVertexAttribPointer.xml",
        "name": "gl.vertexAttribPointer"
      }
    ]
  },
  {
    "name": "gl.drawElements",
    "kind": "function",
    "description": "Render primitives from array data.",
    "usage": "void gl.drawElements(GLenum mode,  Number count,  GLenum type,  const GLvoid * indices); ",
    "parameters": {
      "mode": "Specifies what kind of primitives to render.\n                    Symbolic constants\n                    gl.POINTS,\n                    gl.LINE_STRIP,\n                    gl.LINE_LOOP,\n                    gl.LINES,\n                    gl.TRIANGLE_STRIP,\n                    gl.TRIANGLE_FAN, and\n                    gl.TRIANGLES are accepted.",
      "count": "Specifies the number of elements to be rendered.",
      "type": "Specifies the type of the values in indices. Must be\n                    gl.UNSIGNED_BYTE or gl.UNSIGNED_SHORT.",
      "indices": "Specifies a pointer to the location where the indices are stored."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDrawElements.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCheckFramebufferStatus.xml",
        "name": "gl.checkFramebufferStatus"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDisableVertexAttribArray.xml",
        "name": "gl.disableVertexAttribArray"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDrawArrays.xml",
        "name": "gl.drawArrays"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnableVertexAttribArray.xml",
        "name": "gl.enableVertexAttribArray"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUseProgram.xml",
        "name": "gl.useProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glVertexAttribPointer.xml",
        "name": "gl.vertexAttribPointer"
      }
    ]
  },
  {
    "name": "gl.enable",
    "kind": "function",
    "description": "Enable or disable server-side GL capabilities.",
    "usage": "void gl.enable(GLenum cap); ",
    "parameters": {
      "cap": "Specifies a symbolic constant indicating a GL capability."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnable.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glActiveTexture.xml",
        "name": "gl.activeTexture"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendFunc.xml",
        "name": "gl.blendFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCullFace.xml",
        "name": "gl.cullFace"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDepthFunc.xml",
        "name": "gl.depthFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDepthRangef.xml",
        "name": "gl.depthRangef"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml",
        "name": "gl.getParameter"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsEnabled.xml",
        "name": "gl.isEnabled"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glLineWidth.xml",
        "name": "gl.lineWidth"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glPolygonOffset.xml",
        "name": "gl.polygonOffset"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glScissor.xml",
        "name": "gl.scissor"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilFunc.xml",
        "name": "gl.stencilFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilOp.xml",
        "name": "gl.stencilOp"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexImage2D.xml",
        "name": "gl.texImage2D"
      }
    ]
  },
  {
    "name": "gl.enableVertexAttribArray",
    "kind": "function",
    "description": "Enable or disable a generic vertex attribute array.",
    "usage": "void gl.enableVertexAttribArray(Number index); void gl.disableVertexAttribArray(Number index); ",
    "parameters": {
      "index": "Specifies the index of the generic vertex\n\t\t    attribute to be enabled or disabled."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnableVertexAttribArray.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindAttribLocation.xml",
        "name": "gl.bindAttribLocation"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDrawArrays.xml",
        "name": "gl.drawArrays"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDrawElements.xml",
        "name": "gl.drawElements"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glVertexAttrib.xml",
        "name": "gl.vertexAttrib"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glVertexAttribPointer.xml",
        "name": "gl.vertexAttribPointer"
      }
    ]
  },
  {
    "name": "gl.finish",
    "kind": "function",
    "description": "Block until all GL execution is complete.",
    "usage": "void gl.finish( void); ",
    "parameters": {},
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glFinish.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glFlush.xml",
        "name": "gl.flush"
      }
    ]
  },
  {
    "name": "gl.flush",
    "kind": "function",
    "description": "Force execution of GL commands in finite time.",
    "usage": "void gl.flush( void); ",
    "parameters": {},
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glFlush.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glFinish.xml",
        "name": "gl.finish"
      }
    ]
  },
  {
    "name": "gl.framebufferRenderbuffer",
    "kind": "function",
    "description": "Attach a renderbuffer object to a framebuffer object.",
    "usage": "void gl.framebufferRenderbuffer(GLenum target,  GLenum attachment,  GLenum renderbuffertarget,  Number renderbuffer); ",
    "parameters": {
      "target": "Specifies the framebuffer target. The symbolic constant must be\n\t\t    gl.FRAMEBUFFER.",
      "attachment": "Specifies the attachment point to which \n\t\t    renderbuffer should be attached. Must be one of the\n\t\t    following symbolic constants:\n\t\t    gl.COLOR_ATTACHMENT0,\n\t\t    gl.DEPTH_ATTACHMENT, or\n\t\t    gl.STENCIL_ATTACHMENT.",
      "renderbuffertarget": "Specifies the renderbuffer target. The symbolic constant must be\n\t\t    gl.RENDERBUFFER.",
      "renderbuffer": "Specifies the renderbuffer object that is to be attached."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glFramebufferRenderbuffer.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindFramebuffer.xml",
        "name": "gl.bindFramebuffer"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindRenderbuffer.xml",
        "name": "gl.bindRenderbuffer"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCheckFramebufferStatus.xml",
        "name": "gl.checkFramebufferStatus"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteFramebuffers.xml",
        "name": "gl.deleteFramebuffers"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteRenderbuffers.xml",
        "name": "gl.deleteRenderbuffers"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glFramebufferTexture2D.xml",
        "name": "gl.framebufferTexture2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetFramebufferAttachmentParameteriv.xml",
        "name": "gl.getFramebufferAttachmentParameteriv"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glRenderbufferStorage.xml",
        "name": "gl.renderbufferStorage"
      }
    ]
  },
  {
    "name": "gl.framebufferTexture2D",
    "kind": "function",
    "description": "Attach a texture image to a framebuffer object.",
    "usage": "void gl.framebufferTexture2D(GLenum target,  GLenum attachment,  GLenum textarget,  WebGLTexture texture,  Number level); ",
    "parameters": {
      "target": "Specifies the framebuffer target. The symbolic constant must be\n\t\t    gl.FRAMEBUFFER.",
      "attachment": "Specifies the attachment point to which an image from\n\t\t    texture should be attached. Must be one of the\n\t\t    following symbolic constants:\n\t\t    gl.COLOR_ATTACHMENT0,\n\t\t    gl.DEPTH_ATTACHMENT, or\n\t\t    gl.STENCIL_ATTACHMENT.",
      "textarget": "Specifies the texture target. Must be one of the\n\t\t    following symbolic constants:\n\t\t    gl.TEXTURE_2D,\n\t\t    gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n\t\t    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n\t\t    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n\t\t    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n\t\t    gl.TEXTURE_CUBE_MAP_POSITIVE_Z, or\n\t\t    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z.",
      "texture": "Specifies the texture object whose image is to be attached.",
      "level": "Specifies the mipmap level of the texture image to be attached,\n\t\t    which must be 0."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glFramebufferTexture2D.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindFramebuffer.xml",
        "name": "gl.bindFramebuffer"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindTexture.xml",
        "name": "gl.bindTexture"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCheckFramebufferStatus.xml",
        "name": "gl.checkFramebufferStatus"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteFramebuffers.xml",
        "name": "gl.deleteFramebuffers"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteTextures.xml",
        "name": "gl.deleteTextures"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glFramebufferRenderbuffer.xml",
        "name": "gl.framebufferRenderbuffer"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenerateMipmap.xml",
        "name": "gl.generateMipmap"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetFramebufferAttachmentParameteriv.xml",
        "name": "gl.getFramebufferAttachmentParameteriv"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexImage2D.xml",
        "name": "gl.texImage2D"
      }
    ]
  },
  {
    "name": "gl.frontFace",
    "kind": "function",
    "description": "Define front- and back-facing polygons.",
    "usage": "void gl.frontFace(GLenum mode); ",
    "parameters": {
      "mode": "Specifies the orientation of front-facing polygons.\n                    gl.CW and gl.CCW are accepted.\n                    The initial value is gl.CCW."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glFrontFace.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCullFace.xml",
        "name": "gl.cullFace"
      }
    ]
  },
  {
    "name": "gl.createBuffer",
    "kind": "function",
    "description": "Creates a new WebGLBuffer instance.",
    "usage": "WebGLBuffer gl.createBuffer();",
    "parameters": {},
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenBuffers.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindBuffer.xml",
        "name": "gl.bindBuffer"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteBuffers.xml",
        "name": "gl.deleteBuffers"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml",
        "name": "gl.getParameter"
      }
    ]
  },
  {
    "name": "gl.createFramebuffer",
    "kind": "function",
    "description": "Creates a new WebGLFramebuffer instance.",
    "usage": "WebGLFramebuffer gl.createFramebuffer();",
    "parameters": {},
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenFramebuffers.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindFramebuffer.xml",
        "name": "gl.bindFramebuffer"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteFramebuffers.xml",
        "name": "gl.deleteFramebuffers"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsFramebuffer.xml",
        "name": "gl.isFramebuffer"
      }
    ]
  },
  {
    "name": "gl.createRenderbuffer",
    "kind": "function",
    "description": "Creates a new WebGLRenderbuffer instance.",
    "usage": "WebGLRenderbuffer gl.createRenderbuffer();",
    "parameters": {},
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenRenderbuffers.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindRenderbuffer.xml",
        "name": "gl.bindRenderbuffer"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteRenderbuffers.xml",
        "name": "gl.deleteRenderbuffers"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsRenderbuffer.xml",
        "name": "gl.isRenderbuffer"
      }
    ]
  },
  {
    "name": "gl.createTexture",
    "kind": "function",
    "description": "Creates a new WebGLTexture instance.",
    "usage": "WebGLTexture gl.createTexture();",
    "parameters": {},
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenTextures.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindTexture.xml",
        "name": "gl.bindTexture"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCopyTexImage2D.xml",
        "name": "gl.copyTexImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteTextures.xml",
        "name": "gl.deleteTextures"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml",
        "name": "gl.getParameter"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetTexParameter.xml",
        "name": "gl.getTexParameter"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexImage2D.xml",
        "name": "gl.texImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexParameter.xml",
        "name": "gl.texParameter"
      }
    ]
  },
  {
    "name": "gl.generateMipmap",
    "kind": "function",
    "description": "Generate a complete set of mipmaps for a texture object.",
    "usage": "void gl.generateMipmap(GLenum target); ",
    "parameters": {
      "target": "Specifies the texture target of the active texture unit to which the texture object\n\t\t    is bound whose mipmaps will be generated.  Must be one of the following\n\t\t    symbolic constants: gl.TEXTURE_2D or\n\t\t    gl.TEXTURE_CUBE_MAP."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenerateMipmap.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindTexture.xml",
        "name": "gl.bindTexture"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glFramebufferTexture2D.xml",
        "name": "gl.framebufferTexture2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glHint.xml",
        "name": "gl.hint"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexImage2D.xml",
        "name": "gl.texImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexParameter.xml",
        "name": "gl.texParameter"
      }
    ]
  },
  {
    "name": "gl.getParameter",
    "kind": "function",
    "description": "Return the value or values of a selected parameter.",
    "usage": "void gl.getParameterBooleanv(GLenum pname,  Boolean * params); ",
    "parameters": {
      "pname": "Specifies the parameter value to be returned.\n                    The symbolic constants in the list below are accepted.",
      "params": "Returns the value or values of the specified parameter."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetActiveAttrib.xml",
        "name": "gl.getActiveAttrib"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetActiveUniform.xml",
        "name": "gl.getActiveUniform"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetAttachedShaders.xml",
        "name": "gl.getAttachedShaders"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetAttribLocation.xml",
        "name": "gl.getAttribLocation"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetBufferParameteriv.xml",
        "name": "gl.getBufferParameteriv"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetError.xml",
        "name": "gl.getError"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetFramebufferAttachmentParameteriv.xml",
        "name": "gl.getFramebufferAttachmentParameteriv"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetProgramiv.xml",
        "name": "gl.getProgramiv"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetProgramInfoLog.xml",
        "name": "gl.getProgramInfoLog"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetRenderbufferParameteriv.xml",
        "name": "gl.getRenderbufferParameteriv"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetShaderiv.xml",
        "name": "gl.getShaderiv"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetShaderInfoLog.xml",
        "name": "gl.getShaderInfoLog"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetShaderSource.xml",
        "name": "gl.getShaderSource"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetString.xml",
        "name": "gl.getString"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetTexParameter.xml",
        "name": "gl.getTexParameter"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetUniform.xml",
        "name": "gl.getUniform"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetUniformLocation.xml",
        "name": "gl.getUniformLocation"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetVertexAttrib.xml",
        "name": "gl.getVertexAttrib"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetVertexAttribPointerv.xml",
        "name": "gl.getVertexAttribPointerv"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsEnabled.xml",
        "name": "gl.isEnabled"
      }
    ]
  },
  {
    "name": "gl.getActiveAttrib",
    "kind": "function",
    "description": "Return information about an active attribute variable.",
    "usage": "void gl.getActiveAttrib(WebGLProgram program,  Number index,  Number bufSize,  Number *length,  Number *size,  GLenum *type,  GLchar *name); ",
    "parameters": {
      "program": "Specifies the program object to be\n\t\t    queried.",
      "index": "Specifies the index of the attribute variable\n\t\t    to be queried.",
      "bufSize": "Specifies the maximum number of characters\n\t\t    OpenGL is allowed to write in the character buffer\n\t\t    indicated by name.",
      "length": "Returns the number of characters actually\n\t\t    written by OpenGL in the string indicated by\n\t\t    name (excluding the null\n\t\t    terminator) if a value other than\n\t\t    NULL is passed.",
      "size": "Returns the size of the attribute\n\t\t    variable.",
      "type": "Returns the data type of the attribute\n\t\t    variable.",
      "name": "Returns a null terminated string containing\n\t\t    the name of the attribute variable."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetActiveAttrib.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindAttribLocation.xml",
        "name": "gl.bindAttribLocation"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetActiveUniform.xml",
        "name": "gl.getActiveUniform"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glLinkProgram.xml",
        "name": "gl.linkProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glVertexAttrib.xml",
        "name": "gl.vertexAttrib"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glVertexAttribPointer.xml",
        "name": "gl.vertexAttribPointer"
      }
    ]
  },
  {
    "name": "gl.getActiveUniform",
    "kind": "function",
    "description": "Return information about an active uniform variable.",
    "usage": "void gl.getActiveUniform(WebGLProgram program,  Number index,  Number bufSize,  Number *length,  Number *size,  GLenum *type,  GLchar *name); ",
    "parameters": {
      "program": "Specifies the program object to be\n\t\t    queried.",
      "index": "Specifies the index of the uniform variable to\n\t\t    be queried.",
      "bufSize": "Specifies the maximum number of characters\n\t\t    OpenGL is allowed to write in the character buffer\n\t\t    indicated by name.",
      "length": "Returns the number of characters actually\n\t\t    written by OpenGL in the string indicated by\n\t\t    name (excluding the null\n\t\t    terminator) if a value other than\n\t\t    NULL is passed.",
      "size": "Returns the size of the uniform\n\t\t    variable.",
      "type": "Returns the data type of the uniform\n\t\t    variable.",
      "name": "Returns a null terminated string containing\n\t\t    the name of the uniform variable."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetActiveUniform.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetActiveAttrib.xml",
        "name": "gl.getActiveAttrib"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetUniform.xml",
        "name": "gl.getUniform"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetUniformLocation.xml",
        "name": "gl.getUniformLocation"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glLinkProgram.xml",
        "name": "gl.linkProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml",
        "name": "gl.uniform"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUseProgram.xml",
        "name": "gl.useProgram"
      }
    ]
  },
  {
    "name": "gl.getAttachedShaders",
    "kind": "function",
    "description": "Return the handles of the shader objects attached to a program object.",
    "usage": "void gl.getAttachedShaders(WebGLProgram program,  Number maxCount,  Number *count,  Number *shaders); ",
    "parameters": {
      "program": "Specifies the program object to be\n                    queried.",
      "maxCount": "Specifies the size of the array for storing\n                    the returned object names.",
      "count": "Returns the number of names actually returned\n                    in shaders.",
      "shaders": "Specifies an array that is used to return the\n                    names of attached shader objects."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetAttachedShaders.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glAttachShader.xml",
        "name": "gl.attachShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDetachShader.xml",
        "name": "gl.detachShader"
      }
    ]
  },
  {
    "name": "gl.getAttribLocation",
    "kind": "function",
    "description": "Return the location of an attribute variable.",
    "usage": "Number gl.getAttribLocation(WebGLProgram program,  const GLchar *name); ",
    "parameters": {
      "program": "Specifies the program object to be\n\t\t    queried.",
      "name": "Points to a null terminated string containing\n\t\t    the name of the attribute variable whose location is\n\t\t    to be queried."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetAttribLocation.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindAttribLocation.xml",
        "name": "gl.bindAttribLocation"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glLinkProgram.xml",
        "name": "gl.linkProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glVertexAttrib.xml",
        "name": "gl.vertexAttrib"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glVertexAttribPointer.xml",
        "name": "gl.vertexAttribPointer"
      }
    ]
  },
  {
    "name": "gl.getError",
    "kind": "function",
    "description": "Return error information.",
    "usage": "GLenum gl.getError( void); ",
    "parameters": {},
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetError.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCheckFramebufferStatus.xml",
        "name": "gl.checkFramebufferStatus"
      }
    ]
  },
  {
    "name": "gl.getProgramInfoLog",
    "kind": "function",
    "description": "Return the information log for a program object.",
    "usage": "void gl.getProgramInfoLog(WebGLProgram program,  Number maxLength,  Number *length,  GLchar *infoLog); ",
    "parameters": {
      "program": "Specifies the program object whose information\n\t\t    log is to be queried.",
      "maxLength": "Specifies the size of the character buffer for\n\t\t    storing the returned information log.",
      "length": "Returns the length of the string returned in\n\t\t    infoLog (excluding the null\n\t\t    terminator).",
      "infoLog": "Specifies an array of characters that is used\n\t\t    to return the information log."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetProgramInfoLog.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCompileShader.xml",
        "name": "gl.compileShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetShaderInfoLog.xml",
        "name": "gl.getShaderInfoLog"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glLinkProgram.xml",
        "name": "gl.linkProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glValidateProgram.xml",
        "name": "gl.validateProgram"
      }
    ]
  },
  {
    "name": "gl.getShaderInfoLog",
    "kind": "function",
    "description": "Return the information log for a shader object.",
    "usage": "void gl.getShaderInfoLog(WebGLShader shader,  Number maxLength,  Number *length,  GLchar *infoLog); ",
    "parameters": {
      "shader": "Specifies the shader object whose information\n\t\t    log is to be queried.",
      "maxLength": "Specifies the size of the character buffer for\n\t\t    storing the returned information log.",
      "length": "Returns the length of the string returned in\n\t\t    infoLog (excluding the null\n\t\t    terminator).",
      "infoLog": "Specifies an array of characters that is used\n\t\t    to return the information log."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetShaderInfoLog.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCompileShader.xml",
        "name": "gl.compileShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetProgramInfoLog.xml",
        "name": "gl.getProgramInfoLog"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glLinkProgram.xml",
        "name": "gl.linkProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glValidateProgram.xml",
        "name": "gl.validateProgram"
      }
    ]
  },
  {
    "name": "gl.getShaderPrecisionFormat",
    "kind": "function",
    "description": "Return the range and precision for different shader numeric formats.",
    "usage": "void gl.getShaderPrecisionFormat(GLenum shaderType,  GLenum precisionType,  Number *range,  Number *precision); ",
    "parameters": {
      "shaderType": "Specifies the type of shader to query.\n\t\t    Must be either gl.VERTEX_SHADER\n\t\t    or gl.FRAGMENT_SHADER.",
      "precisionType": "Specifies the numeric format to query, corresponding to a shader precision qualifier and variable type.\n\t\t    Must be one of gl.LOW_FLOAT, gl.MEDIUM_FLOAT, \n                    gl.HIGH_FLOAT, gl.LOW_INT, \n                    gl.MEDIUM_INT, or gl.HIGH_INT.",
      "range": "Specifies a pointer to the two-element array in which the\n\t\t    \n\t\t\t\n\t\t\t\n\t\t\t    log\n\t\t\t\t2\n\t\t\t    \n\t\t\t\n\t\t    \n                    of the minimum and maximum representable magnitudes of the format\n                    are returned.",
      "precision": "Specifies a pointer to the location in which the\n\t\t    \n\t\t\t\n\t\t\t\n\t\t\t    log\n\t\t\t\t2\n\t\t\t    \n\t\t\t\n\t\t    \n                    of the precision of the format is returned."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetShaderPrecisionFormat.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCompileShader.xml",
        "name": "gl.compileShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glShaderSource.xml",
        "name": "gl.shaderSource"
      }
    ]
  },
  {
    "name": "gl.getShaderSource",
    "kind": "function",
    "description": "Return the source code string from a shader object.",
    "usage": "void gl.getShaderSource(WebGLShader shader,  Number bufSize,  Number *length,  GLchar *source); ",
    "parameters": {
      "shader": "Specifies the shader object to be\n\t\t    queried.",
      "bufSize": "Specifies the size of the character buffer for\n\t\t    storing the returned source code string.",
      "length": "Returns the length of the string returned in\n\t\t    source (excluding the null\n\t\t    terminator).",
      "source": "Specifies an array of characters that is used\n\t\t    to return the source code string."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetShaderSource.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCreateShader.xml",
        "name": "gl.createShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glShaderSource.xml",
        "name": "gl.shaderSource"
      }
    ]
  },
  {
    "name": "gl.getTexParameter",
    "kind": "function",
    "description": "Return texture parameter values.",
    "usage": "void gl.getTexParameterfv(GLenum target,  GLenum pname,  Number * params); ",
    "parameters": {
      "target": "Specifies the symbolic name of the target texture of the active texture unit.\n                    gl.TEXTURE_2D and\n                    gl.TEXTURE_CUBE_MAP\n                    are accepted.",
      "pname": "Specifies the symbolic name of a texture parameter.\n                    gl.TEXTURE_MAG_FILTER,\n                    gl.TEXTURE_MIN_FILTER,\n                    gl.TEXTURE_WRAP_S, and\n                    gl.TEXTURE_WRAP_T\n                    are accepted.",
      "params": "Returns the texture parameter."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetTexParameter.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexParameter.xml",
        "name": "gl.texParameter"
      }
    ]
  },
  {
    "name": "gl.getUniform",
    "kind": "function",
    "description": "Return the value of a uniform variable.",
    "usage": "void gl.getUniformfv(WebGLProgram program,  Number location,  Number *params); void gl.getUniformiv(WebGLProgram program,  Number location,  Number *params); ",
    "parameters": {
      "program": "Specifies the program object to be\n\t\t    queried.",
      "location": "Specifies the location of the uniform variable\n\t\t    to be queried.",
      "params": "Returns the value of the specified uniform\n\t\t    variable."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetUniform.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCreateProgram.xml",
        "name": "gl.createProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glLinkProgram.xml",
        "name": "gl.linkProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml",
        "name": "gl.uniform"
      }
    ]
  },
  {
    "name": "gl.getUniformLocation",
    "kind": "function",
    "description": "Return the location of a uniform variable.",
    "usage": "Number gl.getUniformLocation(WebGLProgram program,  const GLchar *name); ",
    "parameters": {
      "program": "Specifies the program object to be\n\t\t    queried.",
      "name": "Points to a null terminated string containing\n\t\t    the name of the uniform variable whose location is\n\t\t    to be queried."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetUniformLocation.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glLinkProgram.xml",
        "name": "gl.linkProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml",
        "name": "gl.uniform"
      }
    ]
  },
  {
    "name": "gl.getVertexAttrib",
    "kind": "function",
    "description": "Return a generic vertex attribute parameter.",
    "usage": "void gl.getVertexAttribfv(Number index,  GLenum pname,  Number *params); void gl.getVertexAttribiv(Number index,  GLenum pname,  Number *params); ",
    "parameters": {
      "index": "Specifies the generic vertex attribute\n\t\t    parameter to be queried.",
      "pname": "Specifies the symbolic name of the vertex\n\t\t    attribute parameter to be queried. Accepted values are\n\t\t    gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING,\n\t\t    gl.VERTEX_ATTRIB_ARRAY_ENABLED,\n\t\t    gl.VERTEX_ATTRIB_ARRAY_SIZE,\n\t\t    gl.VERTEX_ATTRIB_ARRAY_STRIDE,\n\t\t    gl.VERTEX_ATTRIB_ARRAY_TYPE,\n\t\t    gl.VERTEX_ATTRIB_ARRAY_NORMALIZED, or\n\t\t    gl.CURRENT_VERTEX_ATTRIB.",
      "params": "Returns the requested data."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetVertexAttrib.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindAttribLocation.xml",
        "name": "gl.bindAttribLocation"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindBuffer.xml",
        "name": "gl.bindBuffer"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDisableVertexAttribArray.xml",
        "name": "gl.disableVertexAttribArray"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnableVertexAttribArray.xml",
        "name": "gl.enableVertexAttribArray"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glVertexAttrib.xml",
        "name": "gl.vertexAttrib"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glVertexAttribPointer.xml",
        "name": "gl.vertexAttribPointer"
      }
    ]
  },
  {
    "name": "gl.hint",
    "kind": "function",
    "description": "Specify implementation-specific hints.",
    "usage": "void gl.hint(GLenum target,  GLenum mode); ",
    "parameters": {
      "target": "Specifies a symbolic constant indicating the behavior to be controlled.\n                    gl.GENERATE_MIPMAP_HINT is accepted.",
      "mode": "Specifies a symbolic constant indicating the desired behavior.\n                    gl.FASTEST,\n                    gl.NICEST, and\n                    gl.DONT_CARE are accepted."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glHint.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenerateMipmap.xml",
        "name": "gl.generateMipmap"
      }
    ]
  },
  {
    "name": "gl.isBuffer",
    "kind": "function",
    "description": "Determine if a name corresponds to a buffer object.",
    "usage": "Boolean gl.isBuffer(Number buffer); ",
    "parameters": {
      "buffer": "Specifies a value that may be the name of a buffer object."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsBuffer.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindBuffer.xml",
        "name": "gl.bindBuffer"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteBuffers.xml",
        "name": "gl.deleteBuffers"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenBuffers.xml",
        "name": "gl.genBuffers"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml",
        "name": "gl.getParameter"
      }
    ]
  },
  {
    "name": "gl.isEnabled",
    "kind": "function",
    "description": "Test whether a capability is enabled.",
    "usage": "Boolean gl.isEnabled(GLenum cap); ",
    "parameters": {
      "cap": "Specifies a symbolic constant indicating a GL capability."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsEnabled.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnable.xml",
        "name": "gl.enable"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml",
        "name": "gl.getParameter"
      }
    ]
  },
  {
    "name": "gl.isFramebuffer",
    "kind": "function",
    "description": "Determine if a name corresponds to a framebuffer object.",
    "usage": "Boolean gl.isFramebuffer(Number framebuffer); ",
    "parameters": {
      "framebuffer": "Specifies a value that may be the name of a framebuffer object."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsFramebuffer.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindFramebuffer.xml",
        "name": "gl.bindFramebuffer"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteFramebuffers.xml",
        "name": "gl.deleteFramebuffers"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenFramebuffers.xml",
        "name": "gl.genFramebuffers"
      }
    ]
  },
  {
    "name": "gl.isProgram",
    "kind": "function",
    "description": "Determine if a name corresponds to a program object.",
    "usage": "Boolean gl.isProgram(WebGLProgram program); ",
    "parameters": {
      "program": "Specifies a potential program object."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsProgram.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCreateProgram.xml",
        "name": "gl.createProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteProgram.xml",
        "name": "gl.deleteProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUseProgram.xml",
        "name": "gl.useProgram"
      }
    ]
  },
  {
    "name": "gl.isRenderbuffer",
    "kind": "function",
    "description": "Determine if a name corresponds to a renderbuffer object.",
    "usage": "Boolean gl.isRenderbuffer(Number renderbuffer); ",
    "parameters": {
      "renderbuffer": "Specifies a value that may be the name of a renderbuffer object."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsRenderbuffer.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindRenderbuffer.xml",
        "name": "gl.bindRenderbuffer"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteRenderbuffers.xml",
        "name": "gl.deleteRenderbuffers"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenRenderbuffers.xml",
        "name": "gl.genRenderbuffers"
      }
    ]
  },
  {
    "name": "gl.isShader",
    "kind": "function",
    "description": "Determine if a name corresponds to a shader object.",
    "usage": "Boolean gl.isShader(WebGLShader shader); ",
    "parameters": {
      "shader": "Specifies a potential shader object."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsShader.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCreateShader.xml",
        "name": "gl.createShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteShader.xml",
        "name": "gl.deleteShader"
      }
    ]
  },
  {
    "name": "gl.isTexture",
    "kind": "function",
    "description": "Determine if a name corresponds to a texture.",
    "usage": "Boolean gl.isTexture(WebGLTexture texture); ",
    "parameters": {
      "texture": "Specifies a value that may be the name of a texture."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsTexture.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindTexture.xml",
        "name": "gl.bindTexture"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCopyTexImage2D.xml",
        "name": "gl.copyTexImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteTextures.xml",
        "name": "gl.deleteTextures"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenTextures.xml",
        "name": "gl.genTextures"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml",
        "name": "gl.getParameter"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetTexParameter.xml",
        "name": "gl.getTexParameter"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexImage2D.xml",
        "name": "gl.texImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexParameter.xml",
        "name": "gl.texParameter"
      }
    ]
  },
  {
    "name": "gl.lineWidth",
    "kind": "function",
    "description": "Specify the width of rasterized lines.",
    "usage": "void gl.lineWidth(Number width); ",
    "parameters": {
      "width": "Specifies the width of rasterized lines.\n                    The initial value is 1."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glLineWidth.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnable.xml",
        "name": "gl.enable"
      }
    ]
  },
  {
    "name": "gl.linkProgram",
    "kind": "function",
    "description": "Link a program object.",
    "usage": "void gl.linkProgram(WebGLProgram program); ",
    "parameters": {
      "program": "Specifies the handle of the program object to be linked."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glLinkProgram.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glAttachShader.xml",
        "name": "gl.attachShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindAttribLocation.xml",
        "name": "gl.bindAttribLocation"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCompileShader.xml",
        "name": "gl.compileShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glShaderBinary.xml",
        "name": "gl.shaderBinary"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCreateProgram.xml",
        "name": "gl.createProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteProgram.xml",
        "name": "gl.deleteProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDetachShader.xml",
        "name": "gl.detachShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml",
        "name": "gl.uniform"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUseProgram.xml",
        "name": "gl.useProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glValidateProgram.xml",
        "name": "gl.validateProgram"
      }
    ]
  },
  {
    "name": "gl.pixelStorei",
    "kind": "function",
    "description": "Set pixel storage modes.",
    "usage": "void gl.pixelStorei(GLenum pname,  Number param); ",
    "parameters": {
      "pname": "Specifies the symbolic name of the parameter to be set.\n                    One value affects the packing of pixel data into memory:\n                    gl.PACK_ALIGNMENT.\n                    The other affects the unpacking of pixel data from memory:\n                    gl.UNPACK_ALIGNMENT.",
      "param": "Specifies the value that pname is set to."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glReadPixels.xml",
        "name": "gl.readPixels"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexImage2D.xml",
        "name": "gl.texImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexSubImage2D.xml",
        "name": "gl.texSubImage2D"
      }
    ]
  },
  {
    "name": "gl.polygonOffset",
    "kind": "function",
    "description": "Set the scale and units used to calculate depth values.",
    "usage": "void gl.polygonOffset(Number factor,  Number units); ",
    "parameters": {
      "factor": "Specifies a scale factor that is used to create a variable\n                    depth offset for each polygon. The initial value is 0.",
      "units": "Is multiplied by an implementation-specific value to\n                    create a constant depth offset. The initial value is 0."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glPolygonOffset.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDepthFunc.xml",
        "name": "gl.depthFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnable.xml",
        "name": "gl.enable"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml",
        "name": "gl.getParameter"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsEnabled.xml",
        "name": "gl.isEnabled"
      }
    ]
  },
  {
    "name": "gl.readPixels",
    "kind": "function",
    "description": "Read a block of pixels from the frame buffer.",
    "usage": "void gl.readPixels(Number x,  Number y,  Number width,  Number height,  GLenum format,  GLenum type,  GLvoid * data); ",
    "parameters": {
      "x, y": "Specify the window coordinates of the first pixel\n                    that is read from the frame buffer.\n                    This location is the lower left corner of a rectangular block of pixels.",
      "width, height": "Specify the dimensions of the pixel rectangle.\n                    width and height of one correspond to a single pixel.",
      "format": "Specifies the format of the pixel data.\n                    The following symbolic values are accepted:\n                    gl.ALPHA,\n                    gl.RGB, and\n                    gl.RGBA.",
      "type": "Specifies the data type of the pixel data.\n                    Must be one of\n                    gl.UNSIGNED_BYTE,\n                    gl.UNSIGNED_SHORT_5_6_5,\n                    gl.UNSIGNED_SHORT_4_4_4_4, or\n                    gl.UNSIGNED_SHORT_5_5_5_1.",
      "data": "Returns the pixel data."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glReadPixels.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCheckFramebufferStatus.xml",
        "name": "gl.checkFramebufferStatus"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml",
        "name": "gl.pixelStorei"
      }
    ]
  },
  {
    "name": "gl.renderbufferStorage",
    "kind": "function",
    "description": "Create and initialize a renderbuffer object's data store.",
    "usage": "void gl.renderbufferStorage(GLenum target,  GLenum internalformat,  Number width,  Number height); ",
    "parameters": {
      "target": "Specifies the renderbuffer target.  The symbolic constant must be\n\t\t    gl.RENDERBUFFER.",
      "internalformat": "Specifies the color-renderable, depth-renderable, or \n\t\t    stencil-renderable format of the renderbuffer. Must be one of the\n\t\t    following symbolic constants: \n\t\t    gl.RGBA4, \n\t\t    gl.RGB565, \n\t\t    gl.RGB5_A1, \n\t\t    gl.DEPTH_COMPONENT16, or\n\t\t    gl.STENCIL_INDEX8.",
      "width": "Specifies the width of the renderbuffer in pixels.",
      "height": "Specifies the height of the renderbuffer in pixels."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glRenderbufferStorage.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindRenderbuffer.xml",
        "name": "gl.bindRenderbuffer"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteRenderbuffers.xml",
        "name": "gl.deleteRenderbuffers"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glFramebufferRenderbuffer.xml",
        "name": "gl.framebufferRenderbuffer"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenRenderbuffers.xml",
        "name": "gl.genRenderbuffers"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetRenderbufferParameteriv.xml",
        "name": "gl.getRenderbufferParameteriv"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsRenderbuffer.xml",
        "name": "gl.isRenderbuffer"
      }
    ]
  },
  {
    "name": "gl.sampleCoverage",
    "kind": "function",
    "description": "Specify multisample coverage parameters.",
    "usage": "void gl.sampleCoverage(Number value,  Boolean invert); ",
    "parameters": {
      "value": "Specify a single floating-point sample coverage value.  The value is\n                    clamped to the range \n                    \n                        \n                        \n                            0\n                            1\n                        \n                    .\n                    The initial value is 1.0.",
      "invert": "Specify a single boolean value representing if the coverage masks should be\n                    inverted.  true and false are accepted.  The initial value\n                    is false."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glSampleCoverage.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnable.xml",
        "name": "gl.enable"
      }
    ]
  },
  {
    "name": "gl.scissor",
    "kind": "function",
    "description": "Define the scissor box.",
    "usage": "void gl.scissor(Number x,  Number y,  Number width,  Number height); ",
    "parameters": {
      "x, y": "Specify the lower left corner of the scissor box.\n                    Initially (0, 0).",
      "width, height": "Specify the width and height of the scissor box.\n                    When a GL context is first attached to a window,\n                    width and height are set to the dimensions of that\n                    window."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glScissor.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnable.xml",
        "name": "gl.enable"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glViewport.xml",
        "name": "gl.viewport"
      }
    ]
  },
  {
    "name": "gl.shaderSource",
    "kind": "function",
    "description": "Replace the source code in a shader object.",
    "usage": "void gl.shaderSource(WebGLShader shader,  Number count,  const GLchar * const *string,  const Number *length); ",
    "parameters": {
      "shader": "Specifies the handle of the shader object\n\t\t    whose source code is to be replaced.",
      "count": "Specifies the number of elements in the\n\t\t    string and\n\t\t    length\n\t\t    arrays.",
      "string": "Specifies an array of pointers to strings\n\t\t    containing the source code to be loaded into the\n\t\t    shader.",
      "length": "Specifies an array of string lengths."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glShaderSource.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCompileShader.xml",
        "name": "gl.compileShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetShaderPrecisionFormat.xml",
        "name": "gl.getShaderPrecisionFormat"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCreateShader.xml",
        "name": "gl.createShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteShader.xml",
        "name": "gl.deleteShader"
      }
    ]
  },
  {
    "name": "gl.stencilFunc",
    "kind": "function",
    "description": "Set front and back function and reference value for stencil testing.",
    "usage": "void gl.stencilFunc(GLenum func,  Number ref,  Number mask); ",
    "parameters": {
      "func": "Specifies the test function.\n                    Eight symbolic constants are valid:\n                    gl.NEVER,\n                    gl.LESS,\n                    gl.LEQUAL,\n                    gl.GREATER,\n                    gl.GEQUAL,\n                    gl.EQUAL,\n                    gl.NOTEQUAL, and\n                    gl.ALWAYS. The initial value is gl.ALWAYS.",
      "ref": "Specifies the reference value for the stencil test.\n                    ref is clamped to the range \n                    \n                        \n                        \n                            0\n                            \n                                2\n                                n\n                                \n                                -\n                                1\n                            \n                        \n                    ,\n                    where \n                    n\n                    is the number of bitplanes in the stencil buffer. The\n                    initial value is 0.",
      "mask": "Specifies a mask that is ANDed with both the reference value\n                    and the stored stencil value when the test is done. The initial value\n                    is all 1's."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilFunc.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendFunc.xml",
        "name": "gl.blendFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDepthFunc.xml",
        "name": "gl.depthFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnable.xml",
        "name": "gl.enable"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilFuncSeparate.xml",
        "name": "gl.stencilFuncSeparate"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilMask.xml",
        "name": "gl.stencilMask"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilMaskSeparate.xml",
        "name": "gl.stencilMaskSeparate"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilOp.xml",
        "name": "gl.stencilOp"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilOpSeparate.xml",
        "name": "gl.stencilOpSeparate"
      }
    ]
  },
  {
    "name": "gl.stencilFuncSeparate",
    "kind": "function",
    "description": "Set front and/or back function and reference value for stencil testing.",
    "usage": "void gl.stencilFuncSeparate(GLenum face,  GLenum func,  Number ref,  Number mask); ",
    "parameters": {
      "face": "Specifies whether front and/or back stencil state is updated.\n                    Three symbolic constants are valid:\n                    gl.FRONT,\n                    gl.BACK, and\n                    gl.FRONT_AND_BACK.",
      "func": "Specifies the test function.\n                    Eight symbolic constants are valid:\n                    gl.NEVER,\n                    gl.LESS,\n                    gl.LEQUAL,\n                    gl.GREATER,\n                    gl.GEQUAL,\n                    gl.EQUAL,\n                    gl.NOTEQUAL, and\n                    gl.ALWAYS. The initial value is gl.ALWAYS.",
      "ref": "Specifies the reference value for the stencil test.\n                    ref is clamped to the range \n                    \n                        \n                        \n                            0\n                            \n                                2\n                                n\n                                \n                                -\n                                1\n                            \n                        \n                    ,\n                    where \n                    n\n                    is the number of bitplanes in the stencil buffer. The\n                    initial value is 0.",
      "mask": "Specifies a mask that is ANDed with both the reference value\n                    and the stored stencil value when the test is done. The initial value\n                    is all 1's."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilFuncSeparate.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendFunc.xml",
        "name": "gl.blendFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDepthFunc.xml",
        "name": "gl.depthFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnable.xml",
        "name": "gl.enable"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilFunc.xml",
        "name": "gl.stencilFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilMask.xml",
        "name": "gl.stencilMask"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilMaskSeparate.xml",
        "name": "gl.stencilMaskSeparate"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilOp.xml",
        "name": "gl.stencilOp"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilOpSeparate.xml",
        "name": "gl.stencilOpSeparate"
      }
    ]
  },
  {
    "name": "gl.stencilMask",
    "kind": "function",
    "description": "Control the front and back writing of individual bits in the stencil planes.",
    "usage": "void gl.stencilMask(Number mask); ",
    "parameters": {
      "mask": "Specifies a bit mask to enable and disable writing of individual bits\n                    in the stencil planes.\n                    Initially, the mask is all 1's."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilMask.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glColorMask.xml",
        "name": "gl.colorMask"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDepthMask.xml",
        "name": "gl.depthMask"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilFunc.xml",
        "name": "gl.stencilFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilFuncSeparate.xml",
        "name": "gl.stencilFuncSeparate"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilMaskSeparate.xml",
        "name": "gl.stencilMaskSeparate"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilOp.xml",
        "name": "gl.stencilOp"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilOpSeparate.xml",
        "name": "gl.stencilOpSeparate"
      }
    ]
  },
  {
    "name": "gl.stencilMaskSeparate",
    "kind": "function",
    "description": "Control the front and/or back writing of individual bits in the stencil planes.",
    "usage": "void gl.stencilMaskSeparate(GLenum face,  Number mask); ",
    "parameters": {
      "face": "Specifies whether the front and/or back stencil writemask is updated.\n                    Three symbolic constants are valid:\n                    gl.FRONT,\n                    gl.BACK, and\n                    gl.FRONT_AND_BACK.",
      "mask": "Specifies a bit mask to enable and disable writing of individual bits\n                    in the stencil planes.\n                    Initially, the mask is all 1's."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilMaskSeparate.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glColorMask.xml",
        "name": "gl.colorMask"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDepthMask.xml",
        "name": "gl.depthMask"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilFunc.xml",
        "name": "gl.stencilFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilFuncSeparate.xml",
        "name": "gl.stencilFuncSeparate"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilMask.xml",
        "name": "gl.stencilMask"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilOp.xml",
        "name": "gl.stencilOp"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilOpSeparate.xml",
        "name": "gl.stencilOpSeparate"
      }
    ]
  },
  {
    "name": "gl.stencilOp",
    "kind": "function",
    "description": "Set front and back stencil test actions.",
    "usage": "void gl.stencilOp(GLenum sfail,  GLenum dpfail,  GLenum dppass); ",
    "parameters": {
      "sfail": "Specifies the action to take when the stencil test fails.\n                    Eight symbolic constants are accepted:\n                    gl.KEEP,\n                    gl.ZERO,\n                    gl.REPLACE,\n                    gl.INCR,\n                    gl.INCR_WRAP,\n                    gl.DECR,\n                    gl.DECR_WRAP, and\n                    gl.INVERT. The initial value is gl.KEEP.",
      "dpfail": "Specifies the stencil action when the stencil test passes,\n                    but the depth test fails.\n                    dpfail accepts the same symbolic constants as sfail. The initial value\n                    is gl.KEEP.",
      "dppass": "Specifies the stencil action when both the stencil test and the depth\n                    test pass, or when the stencil test passes and either there is no\n                    depth buffer or depth testing is not enabled.\n                    dppass accepts the same symbolic constants as sfail. The initial value\n                    is gl.KEEP."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilOp.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendFunc.xml",
        "name": "gl.blendFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDepthFunc.xml",
        "name": "gl.depthFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnable.xml",
        "name": "gl.enable"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilFunc.xml",
        "name": "gl.stencilFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilFuncSeparate.xml",
        "name": "gl.stencilFuncSeparate"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilMask.xml",
        "name": "gl.stencilMask"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilMaskSeparate.xml",
        "name": "gl.stencilMaskSeparate"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilOpSeparate.xml",
        "name": "gl.stencilOpSeparate"
      }
    ]
  },
  {
    "name": "gl.stencilOpSeparate",
    "kind": "function",
    "description": "Set front and/or back stencil test actions.",
    "usage": "void gl.stencilOpSeparate(GLenum face,  GLenum sfail,  GLenum dpfail,  GLenum dppass); ",
    "parameters": {
      "face": "Specifies whether front and/or back stencil state is updated.\n                    Three symbolic constants are valid:\n                    gl.FRONT,\n                    gl.BACK, and\n                    gl.FRONT_AND_BACK.",
      "sfail": "Specifies the action to take when the stencil test fails.\n                    Eight symbolic constants are accepted:\n                    gl.KEEP,\n                    gl.ZERO,\n                    gl.REPLACE,\n                    gl.INCR,\n                    gl.INCR_WRAP,\n                    gl.DECR,\n                    gl.DECR_WRAP, and\n                    gl.INVERT. The initial value is gl.KEEP.",
      "dpfail": "Specifies the stencil action when the stencil test passes,\n                    but the depth test fails.\n                    dpfail accepts the same symbolic constants as sfail. The initial value\n                    is gl.KEEP.",
      "dppass": "Specifies the stencil action when both the stencil test and the depth\n                    test pass, or when the stencil test passes and either there is no\n                    depth buffer or depth testing is not enabled.\n                    dppass accepts the same symbolic constants as sfail. The initial value\n                    is gl.KEEP."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilOpSeparate.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendFunc.xml",
        "name": "gl.blendFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDepthFunc.xml",
        "name": "gl.depthFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnable.xml",
        "name": "gl.enable"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilFunc.xml",
        "name": "gl.stencilFunc"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilFuncSeparate.xml",
        "name": "gl.stencilFuncSeparate"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilMask.xml",
        "name": "gl.stencilMask"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilMaskSeparate.xml",
        "name": "gl.stencilMaskSeparate"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilOp.xml",
        "name": "gl.stencilOp"
      }
    ]
  },
  {
    "name": "gl.texImage2D",
    "kind": "function",
    "description": "Specify a two-dimensional texture image.",
    "usage": "void gl.texImage2D(GLenum target,  Number level,  Number internalformat,  Number width,  Number height,  Number border,  GLenum format,  GLenum type,  const GLvoid * data); ",
    "parameters": {
      "target": "Specifies the target texture of the active texture unit.\n                    Must be gl.TEXTURE_2D,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_Z, or\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z.",
      "level": "Specifies the level-of-detail number.\n                    Level 0 is the base image level.\n                    Level n is the nth mipmap reduction image.",
      "internalformat": "Specifies the internal format of the texture.\n                    Must be one of the following symbolic constants:\n                    gl.ALPHA,\n                    gl.LUMINANCE,\n                    gl.LUMINANCE_ALPHA,\n                    gl.RGB,\n                    gl.RGBA.",
      "width": "Specifies the width of the texture image.\n                    All implementations support 2D texture images that are at least 64 texels\n                    wide and cube-mapped texture images that are at least 16 texels wide.",
      "height": "Specifies the height of the texture image\n                    All implementations support 2D texture images that are at least 64 texels\n                    high and cube-mapped texture images that are at least 16 texels high.",
      "border": "Specifies the width of the border.\n                    Must be 0.",
      "format": "Specifies the format of the texel data.  Must match internalformat.\n                    The following symbolic values are accepted:\n                    gl.ALPHA,\n                    gl.RGB,\n                    gl.RGBA,\n                    gl.LUMINANCE, and\n                    gl.LUMINANCE_ALPHA.",
      "type": "Specifies the data type of the texel data.\n                    The following symbolic values are accepted:\n                    gl.UNSIGNED_BYTE,\n                    gl.UNSIGNED_SHORT_5_6_5,\n                    gl.UNSIGNED_SHORT_4_4_4_4, and\n                    gl.UNSIGNED_SHORT_5_5_5_1.",
      "data": "Specifies a pointer to the image data in memory."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexImage2D.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glActiveTexture.xml",
        "name": "gl.activeTexture"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCompressedTexImage2D.xml",
        "name": "gl.compressedTexImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCompressedTexSubImage2D.xml",
        "name": "gl.compressedTexSubImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCopyTexImage2D.xml",
        "name": "gl.copyTexImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCopyTexSubImage2D.xml",
        "name": "gl.copyTexSubImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml",
        "name": "gl.pixelStorei"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexSubImage2D.xml",
        "name": "gl.texSubImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexParameter.xml",
        "name": "gl.texParameter"
      }
    ]
  },
  {
    "name": "gl.texSubImage2D",
    "kind": "function",
    "description": "Specify a two-dimensional texture subimage.",
    "usage": "void gl.texSubImage2D(GLenum target,  Number level,  Number xoffset,  Number yoffset,  Number width,  Number height,  GLenum format,  GLenum type,  const GLvoid * data); ",
    "parameters": {
      "target": "Specifies the target texture of the active texture unit.\n                    Must be gl.TEXTURE_2D,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_Z, or\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z.",
      "level": "Specifies the level-of-detail number.\n                    Level 0 is the base image level.\n                    Level n is the nth mipmap reduction image.",
      "xoffset": "Specifies a texel offset in the x direction within the texture array.",
      "yoffset": "Specifies a texel offset in the y direction within the texture array.",
      "width": "Specifies the width of the texture subimage.",
      "height": "Specifies the height of the texture subimage.",
      "format": "Specifies the format of the pixel data.\n                    The following symbolic values are accepted:\n                    gl.ALPHA,\n                    gl.RGB,\n                    gl.RGBA,\n                    gl.LUMINANCE, and\n                    gl.LUMINANCE_ALPHA.",
      "type": "Specifies the data type of the pixel data.\n                    The following symbolic values are accepted:\n                    gl.UNSIGNED_BYTE,\n                    gl.UNSIGNED_SHORT_5_6_5,\n                    gl.UNSIGNED_SHORT_4_4_4_4, and\n                    gl.UNSIGNED_SHORT_5_5_5_1.",
      "data": "Specifies a pointer to the image data in memory."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexSubImage2D.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glActiveTexture.xml",
        "name": "gl.activeTexture"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCompressedTexImage2D.xml",
        "name": "gl.compressedTexImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCompressedTexSubImage2D.xml",
        "name": "gl.compressedTexSubImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCopyTexImage2D.xml",
        "name": "gl.copyTexImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCopyTexSubImage2D.xml",
        "name": "gl.copyTexSubImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml",
        "name": "gl.pixelStorei"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexImage2D.xml",
        "name": "gl.texImage2D"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexParameter.xml",
        "name": "gl.texParameter"
      }
    ]
  },
  {
    "name": "gl.useProgram",
    "kind": "function",
    "description": "Install a program object as part of current rendering state.",
    "usage": "void gl.useProgram(WebGLProgram program); ",
    "parameters": {
      "program": "Specifies the handle of the program object\n\t\t    whose executables are to be used as part of current\n\t\t    rendering state."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUseProgram.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glAttachShader.xml",
        "name": "gl.attachShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindAttribLocation.xml",
        "name": "gl.bindAttribLocation"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCompileShader.xml",
        "name": "gl.compileShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCreateProgram.xml",
        "name": "gl.createProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteProgram.xml",
        "name": "gl.deleteProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDetachShader.xml",
        "name": "gl.detachShader"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glLinkProgram.xml",
        "name": "gl.linkProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml",
        "name": "gl.uniform"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glValidateProgram.xml",
        "name": "gl.validateProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glVertexAttrib.xml",
        "name": "gl.vertexAttrib"
      }
    ]
  },
  {
    "name": "gl.validateProgram",
    "kind": "function",
    "description": "Validate a program object.",
    "usage": "void gl.validateProgram(WebGLProgram program); ",
    "parameters": {
      "program": "Specifies the handle of the program object to\n\t\t    be validated."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glValidateProgram.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glLinkProgram.xml",
        "name": "gl.linkProgram"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUseProgram.xml",
        "name": "gl.useProgram"
      }
    ]
  },
  {
    "name": "gl.vertexAttribPointer",
    "kind": "function",
    "description": "Define an array of generic vertex attribute data.",
    "usage": "void gl.vertexAttribPointer(Number index,  Number size,  GLenum type,  Boolean normalized,  Number stride,  const GLvoid * pointer); ",
    "parameters": {
      "index": "Specifies the index of the generic vertex\n\t\t    attribute to be modified.",
      "size": "Specifies the number of components per\n\t\t    generic vertex attribute. Must\n\t\t    be 1, 2, 3, or 4. The initial value is 4.",
      "type": "Specifies the data type of each component in\n\t\t    the array. Symbolic constants\n\t\t    gl.BYTE,\n\t\t    gl.UNSIGNED_BYTE,\n\t\t    gl.SHORT,\n\t\t    gl.UNSIGNED_SHORT,\n\t\t    gl.FIXED, or\n\t\t    gl.FLOAT are\n\t\t    accepted. The initial value is gl.FLOAT.",
      "normalized": "Specifies whether fixed-point data values\n\t\t    should be normalized (true)\n\t\t    or converted directly as fixed-point values\n\t\t    (false) when they are\n\t\t    accessed.",
      "stride": "Specifies the byte offset between consecutive\n\t\t    generic vertex attributes. If stride\n\t\t    is 0, the generic vertex attributes are\n\t\t    understood to be tightly packed in the\n\t\t    array. The initial value is 0.",
      "pointer": "Specifies a pointer to the first component of\n\t\t    the first generic vertex attribute in the array. The initial value is 0."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glVertexAttribPointer.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindAttribLocation.xml",
        "name": "gl.bindAttribLocation"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindBuffer.xml",
        "name": "gl.bindBuffer"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDisableVertexAttribArray.xml",
        "name": "gl.disableVertexAttribArray"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDrawArrays.xml",
        "name": "gl.drawArrays"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDrawElements.xml",
        "name": "gl.drawElements"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnableVertexAttribArray.xml",
        "name": "gl.enableVertexAttribArray"
      },
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glVertexAttrib.xml",
        "name": "gl.vertexAttrib"
      }
    ]
  },
  {
    "name": "gl.viewport",
    "kind": "function",
    "description": "Set the viewport.",
    "usage": "void gl.viewport(Number x,  Number y,  Number width,  Number height); ",
    "parameters": {
      "x, y": "Specify the lower left corner of the viewport rectangle,\n                    in pixels. The initial value is (0,0).",
      "width, height": "Specify the width and height\n                    of the viewport.\n                    When a GL context is first attached to a window,\n                    width and height are set to the dimensions of that\n                    window."
    },
    "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glViewport.xml",
    "also": [
      {
        "href": "https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDepthRangef.xml",
        "name": "gl.depthRangef"
      }
    ]
  }
]
